{"version":3,"sources":["../src/simpleflakes.ts"],"names":["SIMPLEFLAKE_EPOCH","SimpleFlakeStruct","binary","extractBits","parseSimpleflake","simpleflake","simpleflakeStruct","ts","Date","now","randomBits","epoch","BigInt","Math","round","random","value","padding","binValue","toString","length","CACHE_64_BIT_ZEROS","substr","data","shift","shiftN","bitmask","timestamp","Error","flake"],"mappings":"8UAoFSA,2BAAAA,uBAhCIC,2BAAAA,uBAvBGC,gBAAAA,YA0DhB,iBAAA,cA5CgBC,qBAAAA,iBA2BAC,0BAAAA,sBApDAC,qBAAAA,iBA+DHC,2BAAAA,qBAjFb,MAAMN,kBAAoB,UAkBnB,SAASK,YAAYE,EAAaC,KAAKC,GAAG,EAAE,CAAEC,CAAmB,CAAEC,EAAgBX,iBAAiB,EACzG,MAAO,AAAC,CAAA,AAACY,OAAOL,GAAMK,OAAOD,IAZK,EAAA,AAAG,CAAA,AAY6B,EAChEC,OAAOF,GAAcG,KAAKC,KAAK,CAnBR,AAmBSD,QAAAA,KAAKE,MAAM,IAC/C,CAQO,SAASb,OAAOc,CAA+B,CAAEC,EAAmB,CAAA,CAAI,EAC7E,IAAMC,EAAWN,OAAOI,GAAOG,QAAQ,CAAC,GACxC,OAAOF,GAAWC,EAASE,MAAM,CAAG,GAtBX,AAuBrBC,mEAAmBC,MAAM,CAAC,EAAG,GAAKJ,EAASE,MAAM,EAAIF,EACrDA,CACN,CASO,SAASf,YAAYoB,CAA8B,CAAEC,CAAsB,CAAEJ,CAAuB,EACzG,IAAMK,EAASb,OAAOY,GAChBE,EAAU,AAAE,CAAA,CAAA,AAAE,CAAA,EAAId,OAAOQ,EAAM,EAAK,CAAA,AAAE,CAAA,EAAKK,EACjD,MAAO,AAACb,CAAAA,OAAOW,GAAQG,CAAM,GAAMD,CACrC,CAKO,MAAMxB,kBAIX,YAAY0B,CAAiB,CAAEjB,CAAkB,CAAE,CACjD,GAJF,sBAAgBiB,YAAhB,KAAA,GACA,sBAAgBjB,aAAhB,KAAA,GAGMiB,AAAa,MAAbA,GAAqBjB,AAAc,MAAdA,EACvB,MAAM,AAAIkB,MAAM,0CAElB,CAAA,IAAI,CAACD,SAAS,CAAGA,EACjB,IAAI,CAACjB,UAAU,CAAGA,CACpB,CACF,CAOO,SAASN,iBAAiByB,CAA+B,EAC9D,OAAO,IAAI5B,kBAET,AAACE,CAAAA,YAAY0B,EAlEmB,EAAA,AAAG,CAAA,CAJF,EAAA,AAAG,CAAA,EAuEhCjB,OAAOZ,kBAAiB,EAAGmB,QAAQ,CAAC,IAExChB,YAAY0B,EAtEiB,CAAA,AAAE,CAAA,CAFD,EAAA,AAAG,CAAA,EAwEuCV,QAAQ,CAAC,IAErF,CAGO,MAAMb,kBAAoBL,kBAMjC,SAAe,CAEbA,kBAAmBA,kBAGnBK,kBAAmBL,kBACnBE,YAAaA,YACbC,iBAAkBA,iBAClBF,OAAQA,OACRF,kBAAmBA,kBACnBK,YAAaA,WACf","file":"simpleflakes.js","sourcesContent":["const SIMPLEFLAKE_EPOCH = 946684800000; // Date.UTC(2000, 0, 1) == epoch ms, since 1 Jan 2000 00:00\nconst UNSIGNED_23BIT_MAX = 8388607; // (Math.pow(2, 23) - 1) >> 0\n\nconst SIMPLEFLAKE_TIMESTAMP_LENGTH = 41n;\nconst SIMPLEFLAKE_RANDOM_LENGTH = 23n;\n\nconst SIMPLEFLAKE_RANDOM_SHIFT = 0n;\nconst SIMPLEFLAKE_TIMESTAMP_SHIFT = 23n;\n\nconst CACHE_64_BIT_ZEROS = '0000000000000000000000000000000000000000000000000000000000000000';\n\n/**\n * Generates a simpleflake ID\n * @param ts - Timestamp in milliseconds (defaults to current time)\n * @param randomBits - Random bits for the ID (defaults to a random value)\n * @param epoch - Epoch timestamp in milliseconds (defaults to SIMPLEFLAKE_EPOCH)\n * @returns Generated simpleflake as a BigInt\n */\nexport function simpleflake(ts: number = Date.now(), randomBits?: number, epoch: number = SIMPLEFLAKE_EPOCH): bigint {\n  return ((BigInt(ts) - BigInt(epoch)) << SIMPLEFLAKE_TIMESTAMP_SHIFT) +\n    BigInt(randomBits ?? Math.round(Math.random() * UNSIGNED_23BIT_MAX));\n}\n\n/**\n * Converts a value to binary representation\n * @param value - The value to convert to binary\n * @param padding - Whether to pad to 64 bits (defaults to true)\n * @returns Binary string representation\n */\nexport function binary(value: bigint | number | string, padding: boolean = true): string {\n  const binValue = BigInt(value).toString(2);\n  return padding && binValue.length < 64\n    ? CACHE_64_BIT_ZEROS.substr(0, 64 - binValue.length) + binValue\n    : binValue;\n}\n\n/**\n * Extracts bits from a data value\n * @param data - The data to extract bits from\n * @param shift - Number of bits to shift\n * @param length - Number of bits to extract\n * @returns Extracted bits as a BigInt\n */\nexport function extractBits(data: bigint | number | string, shift: bigint | number, length: bigint | number): bigint {\n  const shiftN = BigInt(shift);\n  const bitmask = ((1n << BigInt(length)) - 1n) << shiftN;\n  return (BigInt(data) & bitmask) >> shiftN;\n}\n\n/**\n * Structure representing a parsed simpleflake\n */\nexport class SimpleFlakeStruct {\n  public readonly timestamp: string;\n  public readonly randomBits: string;\n\n  constructor(timestamp: string, randomBits: string) {\n    if (timestamp == null || randomBits == null) {\n      throw new Error('Missing argument for SimpleFlakeStruct.');\n    }\n    this.timestamp = timestamp;\n    this.randomBits = randomBits;\n  }\n}\n\n/**\n * Parses a simpleflake into its components\n * @param flake - The simpleflake to parse\n * @returns SimpleFlakeStruct containing timestamp and random bits\n */\nexport function parseSimpleflake(flake: bigint | number | string): SimpleFlakeStruct {\n  return new SimpleFlakeStruct(\n    // timestamp\n    (extractBits(flake, SIMPLEFLAKE_TIMESTAMP_SHIFT, SIMPLEFLAKE_TIMESTAMP_LENGTH)\n      + BigInt(SIMPLEFLAKE_EPOCH)).toString(10),\n    // random bits\n    extractBits(flake, SIMPLEFLAKE_RANDOM_SHIFT, SIMPLEFLAKE_RANDOM_LENGTH).toString(10)\n  );\n}\n\n// Legacy function alias for backwards compatibility\nexport const simpleflakeStruct = SimpleFlakeStruct;\n\n// Export constants\nexport { SIMPLEFLAKE_EPOCH };\n\n// Default export for CommonJS compatibility\nexport default {\n  // Enhancements\n  SimpleFlakeStruct: SimpleFlakeStruct,\n\n  // original API\n  simpleflakeStruct: SimpleFlakeStruct,\n  extractBits: extractBits,\n  parseSimpleflake: parseSimpleflake,\n  binary: binary,\n  SIMPLEFLAKE_EPOCH: SIMPLEFLAKE_EPOCH,\n  simpleflake: simpleflake\n};\n"]}